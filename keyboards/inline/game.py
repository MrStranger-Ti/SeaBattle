from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

from objects.player import Player


def get_positions_keyboard(player: Player, opponent: bool = False) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–∑–∏—Ü–∏–π.

    :param player: –∏–≥—Ä–æ–∫
    :param opponent: –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ª–∏ –ø–æ–ª–µ –∫–Ω–æ–ø–æ–∫ –∫–∞–∫ –≤—Ä–∞–∂–µ—Å–∫–æ–µ
    :return: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    keyboard = InlineKeyboardMarkup()
    for row in player.field:
        row_buttons = []
        for cell in row:
            if (opponent and cell.is_ship and cell.opened) or (not opponent and cell.is_ship):
                button_text = 'üö¢'

            elif opponent and cell.opened:
                button_text = ' '

            else:
                button_text = 'üü¶'

            button = InlineKeyboardButton(text=button_text, callback_data=cell.position)
            row_buttons.append(button)

        keyboard.row(*row_buttons)

    # keyboard = InlineKeyboardMarkup()
    # choices = []
    # for row in row_letters:
    #     for col in col_numbers:
    #         choices.append(row + col)
    #
    # buttons = []
    # for position in choices:
    #     button = InlineKeyboardButton(text=position, callback_data=position)
    #     buttons.append(button)
    #
    # size = len(row_letters)
    # for _ in range(size):
    #     keyboard.row(*buttons[:size])
    #     del buttons[:size]

    return keyboard


def get_direction_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π.

    :return: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    keyboard = InlineKeyboardMarkup()
    choices = [
        ('–≤–ª–µ–≤–æ', 'left'),
        ('–≤–ø—Ä–∞–≤–æ', 'right'),
        ('–≤–≤–µ—Ä—Ö', 'top'),
        ('–≤–Ω–∏–∑', 'bottom'),
        ('–Ω–∞–∑–∞–¥', 'cancel'),
    ]
    buttons = []
    for text, data in choices:
        button = InlineKeyboardButton(text=text, callback_data=data)
        buttons.append(button)

    keyboard.row(buttons[0], buttons[1])
    keyboard.row(buttons[2], buttons[3])
    keyboard.row(buttons[4])

    return keyboard
