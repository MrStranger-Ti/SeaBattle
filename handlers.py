from telebot import TeleBot
from telebot.types import Message, CallbackQuery

from database.queries import get_users
from helpers.validators import validate_positions_callback
from main import check_queue
from settings import PLAYERS_QUEUE, row_letters, col_numbers, ships
from states.states import get_or_add_state
from keyboards.reply.main_keyboard import keyboard_start, keyboard_play


def load(bot: TeleBot):
    # |--------------------|
    # | –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ |
    # |--------------------|
    @bot.message_handler(commands=['info'])
    def info(message: Message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info.

        :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        players_queue_ids = [user.id for user in PLAYERS_QUEUE]
        user_state = get_or_add_state(message.from_user.id)
        if message.from_user.id not in players_queue_ids and not user_state.in_game:
            with open('message_text/information.txt', 'r', encoding='utf-8') as f:  # –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                contents = f.read()
                bot.send_message(message.chat.id,contents)

    @bot.message_handler(commands=['rating'])
    def rating_table(message: Message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /rating.

        :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        players_queue_ids = [user.id for user in PLAYERS_QUEUE]
        user_state = get_or_add_state(message.from_user.id)
        if message.from_user.id not in players_queue_ids and not user_state.in_game:
            users_rating = ""
            current_user_rating = None
            for num, user in enumerate(get_users(), start=1):
                user_id, username, rating = user
                if num <= 10:
                    users_rating += f"{num}. @{username} - {rating}üèÜ\n"
                if user_id == message.from_user.id:
                    current_user_rating = f"\n<b>{num}. @{username}(–≤—ã) - {rating}üèÜ</b>\n"
            if current_user_rating:
                users_rating += current_user_rating
            bot.send_message(message.chat.id, text=f"üèµ–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤üèµ\n\n{users_rating}",
                             reply_markup=keyboard_start(), parse_mode="HTML")
    @bot.message_handler(commands=['start'])
    def start(message: Message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.

        :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        players_queue_ids = [user.id for user in PLAYERS_QUEUE]
        user_state = get_or_add_state(message.from_user.id)

        if message.from_user.id not in players_queue_ids and not user_state.in_game:
           bot.send_message(message.chat.id, text="–ü—Ä–∏–≤–µ—Ç, {0.first_name}!".format(message.from_user), reply_markup=keyboard_start())

    @bot.message_handler(commands=['play'])
    def add_player_to_queue(message: Message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /play.

        :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ id –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏.
        players_queue_ids = [user.id for user in PLAYERS_QUEUE]

        # –î–æ—Å—Ç–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        user_state = get_or_add_state(message.from_user.id)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –∏ –Ω–µ –≤ –∏–≥—Ä–µ, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –æ—á–µ—Ä–µ–¥—å.
        if message.from_user.id not in players_queue_ids and not user_state.in_game:
            PLAYERS_QUEUE.append(message.from_user)
            bot.send_message(message.from_user.id, '–ò–¥–µ—Ç –ø–æ–¥–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤...', reply_markup=keyboard_play())

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏—é —Å –Ω—É–∂–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏–≥—Ä–æ–∫–æ–≤.
            check_queue()

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –æ—á–µ—Ä–µ–¥–∏, —Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –µ–≥–æ –æ–± —ç—Ç–æ–º.
        elif message.from_user.id in players_queue_ids:
            bot.send_message(message.from_user.id, '–í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏.')

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∏–≥—Ä–µ, —Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –µ–≥–æ –æ–± —ç—Ç–æ–º.
        elif user_state.in_game:
            bot.send_message(message.from_user.id, '–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ.')

    @bot.message_handler(commands=['leave'])
    def leave(message: Message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /leave.

        :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        user_state = get_or_add_state(message.from_user.id)

        # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∏–≥—Ä–µ, —Ç–æ —Å—Ç–∞–≤–∏–º –µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏–µ leaving_game.
        # –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–µ—Å—Å–∏—è —É–≤–∏–¥–∏—Ç, —á—Ç–æ —É –∏–≥—Ä–æ–∫–∞ —Å–º–µ–Ω–∏–ª–æ—Å—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∏—Å–∫–ª—é—á–∏—Ç –µ–≥–æ.
        if user_state.in_game:
            user_state.name = 'leaving_game'

        # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–¥–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–æ–≤, —Ç–æ —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏.
        for user in PLAYERS_QUEUE:
            if message.from_user.id == user.id:
                PLAYERS_QUEUE.remove(user)
                bot.send_message(message.from_user.id, '–ü–æ–¥–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω.', reply_markup=keyboard_start())
                break

    # |-------------------------------|
    # | –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ |
    # |-------------------------------|
    @bot.callback_query_handler(validate_positions_callback)
    def process_position_buttons(callback: CallbackQuery):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –ø–æ–∑–∏—Ü–∏–π —è—á–µ–µ–∫.

        :param callback: –¥–∞–Ω–Ω—ã–µ –æ –∫–Ω–æ–ø–∫–µ
        """
        user_state = get_or_add_state(callback.from_user.id)
        for ship in ships:

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –∏–≥—Ä–µ.
            if user_state.name == 'setting_ship_position_' + ship:
                user_state.name = 'check_ship_position_' + ship
                user_state.messages['position'] = callback.data

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–≥—Ä—ã.
            elif user_state.name == 'making_move':
                user_state.name = 'check_move'
                user_state.messages['position'] = callback.data

    @bot.callback_query_handler(lambda callback: callback.data in ('top', 'right', 'bottom', 'left', 'cancel'))
    def process_direction_buttons(callback: CallbackQuery):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.

        :param callback: –¥–∞–Ω–Ω—ã–µ –æ –∫–Ω–æ–ø–∫–µ
        """
        user_state = get_or_add_state(callback.from_user.id)
        for ship in ships:

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –∏–≥—Ä–µ.
            if user_state.name == 'setting_ship_direction_' + ship:

                if callback.data == 'cancel':
                    user_state.name = 'cancel_ship_direction_' + ship
                    break

                user_state.name = 'check_ship_direction_' + ship
                user_state.messages['direction'] = callback.data

    # |-------------------|
    # | –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ |
    # |-------------------|
    @bot.message_handler(content_types=['text'])
    def game_process(message: Message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.

        :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        # –î–æ—Å—Ç–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        user_state = get_or_add_state(message.from_user.id)

        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_move, —Ç–æ —É–¥–∞–ª—è–µ–º –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç.
        if user_state.name == 'waiting_for_move':
            bot.delete_message(message.chat.id, message.id)

        elif message.text == "üë•–ü–æ–¥–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤üë•":
            add_player_to_queue(message)
            bot.delete_message(message_id=message.id, chat_id=message.from_user.id)

        elif message.text == "–ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å –∏–ª–∏ –∏–≥—Ä—É":
            leave(message)
            bot.delete_message(message_id=message.id, chat_id=message.from_user.id)

        elif message.text == "üìï–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èüìï":
            info(message)
            bot.delete_message(message_id=message.id, chat_id=message.from_user.id)

        elif message.text == "üèÜ–†–µ–π—Ç–∏–Ω–≥üèÜ":
            rating_table(message)
            bot.delete_message(message_id=message.id, chat_id=message.from_user.id)
